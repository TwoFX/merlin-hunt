; ModuleID = 'relay.c'
source_filename = "relay.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@arr = dso_local global [{standardOutputBytes.length} x i32] [{#each standardOutputBytes}i32 {it}{#if it_hasNext}, {/if}{/each}], align 4
@arr2 = dso_local global [{standardErrorBytes.length} x i32] [{#each standardErrorBytes}i32 {it}{#if it_hasNext}, {/if}{/each}], align 16
@stdout = external global ptr, align 8
@stderr = external global ptr, align 8

; Function Attrs: noinline nounwind optnone sspstrong uwtable
def{#if !errors}ine{/if} dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  br label %3

3:                                                ; preds = %29, %0
  %4 = load i32, ptr %2, align 4
  %5 = icmp slt i32 %4, {totalLength}
  br i1 %5, label %6, label %32

6:                                                ; preds = %3
  %7 = load i32, ptr %2, align 4
  %8 = icmp slt i32 %7, {standardOutputBytes.length}
  br i1 %8, label %9, label %17

9:                                                ; preds = %6
  %10 = load i32, ptr %2, align 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [{standardOutputBytes.length} x i32], ptr @arr, i64 0, i64 %11
  %13 = load i32, ptr %12, align 4
  %14 = add nsw i32 %13, 1
  %15 = load ptr, ptr @stdout, align 8
  %16 = call i32 @putc(i32 noundef %14, ptr noundef %15)
  br label %17

17:                                               ; preds = %9, %6
  %18 = load i32, ptr %2, align 4
  %19 = icmp slt i32 %18, {standardErrorBytes.length}
  br i1 %19, label %20, label %28

20:                                               ; preds = %17
  %21 = load i32, ptr %2, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [{standardErrorBytes.length} x i32], ptr @arr2, i64 0, i64 %22
  %24 = load i32, ptr %23, align 4
  %25 = add nsw i32 %24, 7
  %26 = load ptr, ptr @stderr, align 8
  %27 = call i32 @putc(i32 noundef %25, ptr noundef %26)
  br label %28

28:                                               ; preds = %20, %17
  br label %29

29:                                               ; preds = %28
  %30 = load i32, ptr %2, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, ptr %2, align 4
  br label %3, !llvm.loop !6

32:                                               ; preds = %3
  %33 = load i32, ptr %1, align 4
  ret i32 %33
}

declare i32 @putc(i32 noundef, ptr noundef) #1

attributes #0 = { noinline nounwind optnone sspstrong uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

{|!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 15.0.7"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}|}
